/*
 * profiler.hpp
 *
 *  Created on: Feb 6, 2020
 *      Author: lukas
 */

#ifndef SRC_HOTSPOT_SHARE_SI_PROFILER_HPP_
#define SRC_HOTSPOT_SHARE_SI_PROFILER_HPP_

#define PROFILE_FILENAME "app.profile"

#include <string>
#include "memory/allocation.hpp"

/**
 * Types:
 *  - lec: local execution counter (always absolute, used for start, catch blocks and after a method call)
 *  - jc:  jump counter (stored at the bco of the jump instruction but adds to the count at its target loc)
 * Furthermore, a return instruction (opcode between ireturn and _return inclusive) is always followed by an implied lec with a count of 0
 */
enum BranchPointType {
  LOCAL_EXECUTION_COUNTER,
  JUMP_COUNTER
};

/**
 * The profiler main interface.
 * Profiling has to be enabled at VM startup time with the -XX:GenerateSiProfile=profile.file
 * Superinstructions have to be disabled to use profiling effectively.
 *
 * Profiling works by switching all branch instructions to their "profile" variants. The profile
 * variant has an extra uint32 as an operand, following whatever operands they have by default.
 * This 32-bit operand is generated by this class to uniquely identify the jump.
 *
 * There's a further special "profile" instruction which is inserted at the start of every method
 * and every catch block. This instruction counts how often it is executed, whereas conditional
 * jumps report every time their branch is taken.
 */
class Profiler: public AllStatic {
private:
  static volatile uint32_t _last_id;
public:
  /**
   * Stops the profiler, writing an app.profile to the working directory.
   */
  static void on_shutdown(void);

  /**
   * Generate an id and associate that id with the location.
   * The location consists of the the class id, method name and bytecode offset. The bytecode
   * offset is the original offset in unedited bytecode.
   */
  static uint32_t allocate_instruction(std::string class_id, std::string method_name, std::string method_desc, uint16_t bco, BranchPointType type);

  /**
   * Visit a particular branch instruction.
   */
  static void visit(uint32_t id);
};



#endif /* SRC_HOTSPOT_SHARE_SI_PROFILER_HPP_ */
